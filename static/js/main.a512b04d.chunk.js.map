{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["colors","App","useState","Date","now","refreshTime","setRefreshTime","distributions","setDistributions","lastModified","setLastModified","fetchError","setFetchError","useEffect","fetch","proxy","then","res","json","data","headers","get","modified","catch","err","message","percentage","className","length","map","d","idx","style","backgroundColor","row","Fragment","version","name","apiLevel","distributionPercentage","toFixed","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAiBMA,G,MAAS,CACX,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAiEWC,MA9Df,WAAgB,IAAD,EAC2BC,mBAASC,KAAKC,KADzC,mBACJC,EADI,KACSC,EADT,OAE+BJ,mBAAyB,IAFxD,mBAEJK,EAFI,KAEWC,EAFX,OAG6BN,mBAAS,IAHtC,mBAGJO,EAHI,KAGUC,EAHV,OAIyBR,mBAAwB,MAJjD,mBAIJS,EAJI,KAIQC,EAJR,KAMXC,qBAAU,WAGNC,MAAMC,wGACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,OAAOF,MAAK,SAAAG,GAAI,MAAI,CAACA,EAAMF,EAAIG,QAAQC,IAAI,wBAC3DL,MAAK,YAAuB,IAAD,mBAApBG,EAAoB,KAAdG,EAAc,KACxBd,EAAiBW,GACjBT,EAAgBY,GAChBV,EAAc,SAEjBW,OAAM,SAAAC,GACHhB,EAAiB,IACjBI,EAAcY,EAAIC,cAE3B,CAACpB,IAEJ,IAAIqB,EAAa,EACjB,OACI,sBAAKC,UAAU,MAAf,UACKhB,GACG,8BAAMA,IAETJ,EAAcqB,OAAS,GACpB,qCACI,sBAAKD,UAAU,OAAf,UACI,qBAAKA,UAAU,WACf,qBAAKA,UAAU,SAAf,8BACA,qBAAKA,UAAU,SAAf,uBACA,qBAAKA,UAAU,SAAf,+BACA,qBAAKA,UAAU,SAAf,qCACCpB,EAAcsB,KAAI,SAACC,EAAGC,GACnB,IAAMC,EAAuB,CACzBC,gBAAiBjC,EAAO+B,EAAM/B,EAAO4B,SAEnCM,EACF,eAAC,IAAMC,SAAP,WACI,qBAAKR,UAAU,UAAUK,MAAOA,EAAhC,SAAwCF,EAAEM,UAC1C,qBAAKJ,MAAOA,EAAZ,SAAoBF,EAAEO,OACtB,qBAAKV,UAAU,WAAWK,MAAOA,EAAjC,SAAyCF,EAAEQ,WAC3C,sBAAKN,MAAOA,EAAZ,WAAgD,IAA3BF,EAAES,wBAA8BC,QAAQ,GAA7D,OACA,sBAAKR,MAAOA,EAAZ,WAAkC,IAAbN,GAAkBc,QAAQ,GAA/C,SALiBV,EAAEQ,UAS3B,OADAZ,GAAcI,EAAES,uBACTL,QAGf,sBAAKP,UAAU,UAAUc,QAAS,kBAAMnC,EAAeH,KAAKC,MAA5D,qCAC4B,+BAAOK,cCrExCiC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a512b04d.chunk.js","sourcesContent":["import React, { CSSProperties, useEffect, useState } from 'react';\nimport './App.css';\n\ntype Distribution = {\n    name: string,\n    version: string,\n    apiLevel: number,\n    distributionPercentage: number,\n    url: string,\n    descriptionBlocks: DescriptionBlock[],\n}\n\ntype DescriptionBlock = {\n    title: string,\n    body: string,\n}\n\nconst colors = [\n    \"#d3ded3\",\n    \"#7DC691\",\n    \"#92B2B7\",\n    \"#DEBA40\",\n    \"#E55D5F\",\n    \"#6EC0D2\",\n    \"#D88D63\",\n    \"#FF9229\",\n    \"#EABD2D\",\n]\n\nfunction App() {\n    const [refreshTime, setRefreshTime] = useState(Date.now)\n    const [distributions, setDistributions] = useState<Distribution[]>([]);\n    const [lastModified, setLastModified] = useState(\"\");\n    const [fetchError, setFetchError] = useState<string | null>(null);\n\n    useEffect(() => {\n        const proxy = \"https://cors-anywhere.herokuapp.com/\"\n        const url = \"https://dl.google.com/android/studio/metadata/distributions.json\";\n        fetch(proxy + url)\n            .then(res => res.json().then(data => [data, res.headers.get(\"Last-Modified\")]))\n            .then(([data, modified]) => {\n                setDistributions(data);\n                setLastModified(modified);\n                setFetchError(null);\n            })\n            .catch(err => {\n                setDistributions([]);\n                setFetchError(err.message);\n            })\n    }, [refreshTime]);\n\n    let percentage = 1.0\n    return (\n        <div className=\"App\">\n            {fetchError && (\n                <div>{fetchError}</div>\n            )}\n            {distributions.length > 0 && (\n                <>\n                    <div className=\"List\">\n                        <div className=\"Header\" />\n                        <div className=\"Header\">Platform Version</div>\n                        <div className=\"Header\">API Level</div>\n                        <div className=\"Header\">% of Distribution</div>\n                        <div className=\"Header\">Cumulative Distribution</div>\n                        {distributions.map((d, idx) => {\n                            const style: CSSProperties = {\n                                backgroundColor: colors[idx % colors.length]\n                            }\n                            const row = (\n                                <React.Fragment key={d.apiLevel}>\n                                    <div className=\"version\" style={style}>{d.version}</div>\n                                    <div style={style}>{d.name}</div>\n                                    <div className=\"apiLevel\" style={style}>{d.apiLevel}</div>\n                                    <div style={style}>{(d.distributionPercentage * 100).toFixed(1)}%</div>\n                                    <div style={style}>{(percentage * 100).toFixed(1)}%</div>\n                                </React.Fragment>\n                            );\n                            percentage -= d.distributionPercentage;\n                            return row;\n                        })}\n                    </div>\n                    <div className=\"Updated\" onClick={() => setRefreshTime(Date.now)}>\n                        Last Updated by Google: <span>{lastModified}</span>\n                    </div>\n                </>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}