{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["colors","App","useState","Date","now","refreshTime","setRefreshTime","distributions","setDistributions","lastModified","setLastModified","fetchError","setFetchError","expandedDetail","setExpandedDetail","useEffect","fetch","then","res","json","data","headers","get","modified","catch","err","message","cumulative","className","length","map","d","idx","isSelected","style","backgroundColor","cursor","detailStyle","display","onClick","row","Fragment","version","name","apiLevel","distributionPercentage","toFixed","href","url","descriptionBlocks","block","title","body","split","text","i","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ecddcaa.chunk.js","sourcesContent":["import React, { CSSProperties, useEffect, useState } from 'react';\nimport './App.css';\n\ntype Distribution = {\n    name: string,\n    version: string,\n    apiLevel: number,\n    distributionPercentage: number,\n    url: string,\n    descriptionBlocks: DescriptionBlock[],\n}\n\ntype DescriptionBlock = {\n    title: string,\n    body: string,\n}\n\nconst colors = [\n    \"#D3DED3\",\n    \"#7DC691\",\n    \"#92B2B7\",\n    \"#DEBA40\",\n    \"#E55D5F\",\n    \"#6EC0D2\",\n    \"#D88D63\",\n    \"#FF9229\",\n    \"#EABD2D\",\n]\n\nfunction App() {\n    const [refreshTime, setRefreshTime] = useState(Date.now)\n    const [distributions, setDistributions] = useState<Distribution[]>([]);\n    const [lastModified, setLastModified] = useState(\"\");\n    const [fetchError, setFetchError] = useState<string | null>(null);\n    const [expandedDetail, setExpandedDetail] = useState<number | null>(null);\n\n    useEffect(() => {\n        const url = \"https://us-central1-android-distro.cloudfunctions.net/distros\";\n        fetch(url)\n            .then(res => res.json().then(data => [data, res.headers.get(\"Last-Modified\")]))\n            .then(([data, modified]) => {\n                setDistributions(data);\n                setLastModified(modified);\n                setFetchError(null);\n            })\n            .catch(err => {\n                setDistributions([]);\n                setFetchError(err.message);\n            })\n    }, [refreshTime]);\n\n    let cumulative = 1.0\n    return (\n        <div className=\"App\">\n            {fetchError && (\n                <div>Couldn't load latest stats: {fetchError}</div>\n            )}\n            {distributions.length > 0 && (\n                <>\n                    <div className=\"List\">\n                        <div className=\"Header\" />\n                        <div className=\"Header\">Platform Version</div>\n                        <div className=\"Header\">API Level</div>\n                        <div className=\"Header\">% of Distribution</div>\n                        <div className=\"Header\">Cumulative Distribution</div>\n                        {distributions.map((d, idx) => {\n                            const isSelected = idx === expandedDetail;\n                            const style: CSSProperties = {\n                                backgroundColor: colors[idx % colors.length],\n                                cursor: \"pointer\",\n                            }\n                            const detailStyle: CSSProperties = {\n                                display: isSelected ? \"block\" : \"none\",\n                                backgroundColor: colors[idx % colors.length],\n                            }\n                            const onClick = () => setExpandedDetail(isSelected ? null : idx);\n                            const row = (\n                                <React.Fragment key={d.apiLevel}>\n                                    <div className=\"Version\" style={style} onClick={onClick}>{d.version}</div>\n                                    <div style={style} onClick={onClick} >{d.name}</div>\n                                    <div className=\"ApiLevel\" style={style} onClick={onClick}>{d.apiLevel}</div>\n                                    <div style={style} onClick={onClick}>{(d.distributionPercentage * 100).toFixed(1)}%</div>\n                                    <div style={style} onClick={onClick}>{(cumulative * 100).toFixed(1)}%</div>\n                                    <div className=\"Detail\" style={detailStyle}>\n                                        <a className=\"Link\" href={d.url}>Release Notes</a>\n                                        {d.descriptionBlocks.map((block) => (\n                                            <div className=\"DetailBock\">\n                                                <div className=\"DetailTitle\">{block.title}</div>\n                                                <div className=\"DetailBody\">{\n                                                    // Make <br>'s functional.\n                                                    block.body.split(\"<br>\").map((text, i) => {\n                                                        if (i === 0) {\n                                                            return (<span>{text}</span>);\n                                                        } else {\n                                                            return (\n                                                                <>\n                                                                    <br />\n                                                                    <span>{text}</span>\n                                                                </>\n                                                            );\n                                                        }\n                                                    })\n                                                }</div>\n                                            </div>\n                                        ))}\n                                    </div>\n                                    <div className=\"Spacer\"/>\n                                </React.Fragment>\n                            );\n                            cumulative -= d.distributionPercentage;\n                            return row;\n                        })}\n                    </div>\n                    <div className=\"Footer\" onClick={() => setRefreshTime(Date.now)}>\n                        <a href=\"https://github.com/nbadal/android-dist\">Github</a> | Last Updated by Google: <span>{lastModified}</span>\n                        {lastModified.includes(\"2020\") && (<span> (yes it really has been that long...)</span>)}\n                    </div>\n                </>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}